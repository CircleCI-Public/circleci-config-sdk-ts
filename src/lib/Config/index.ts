import { Command, CommandSchema } from '../Components/Commands/Command';
import { Job } from '../Components/Job';
import { JobSchema } from '../Components/Job/index';
import { Workflow } from '../Components/Workflow';
import { WorkflowSchema } from '../Components/Workflow/Workflow';
import { Pipeline } from './Pipeline';
import { stringify as Stringify } from 'yaml';
import { version as SDKVersion } from '../../package-version.json';

/**
 * A CircleCI configuration. Instantiate a new config and add CircleCI config elements.
 */
export class Config implements CircleCIConfigObject {
  /**
   * The version field is intended to be used in order to issue warnings for deprecation or breaking changes.
   */
  version: ConfigVersion = 2.1;
  /**
   * Jobs are collections of steps. All of the steps in the job are executed in a single unit, either within a fresh container or VM.
   */
  jobs: Job[] = [];
  /**
   * A command definition defines a sequence of steps as a map to be executed in a job, enabling you to reuse a single command definition across multiple jobs.
   */
  commands: Command[] = [];
  /**
   * A Workflow is comprised of one or more uniquely named jobs.
   */
  workflows: Workflow[] = [];
  /**
   * Access information about the current pipeline.
   */
  pipeline: Pipeline = new Pipeline();
  /**
   * Designates the config.yaml for use of CircleCIâ€™s dynamic configuration feature.
   */
  setup: boolean;
  /**
   * Instantiate a new CircleCI config. Build up your config by adding components.
   * @param jobs - Instantiate with pre-defined Jobs.
   * @param workflows - Instantiate with pre-defined Workflows.
   * @param commands - Instantiate with pre-defined reusable Commands.
   */
  constructor(
    setup = false,
    jobs?: Job[],
    workflows?: Workflow[],
    commands?: Command[],
  ) {
    this.setup = setup;
    this.jobs.concat(jobs || []);
    this.workflows.concat(workflows || []);
    this.commands = commands || [];
  }

  /**
   * Add a Workflow to the current Config. Chainable
   * @param workflow - Injectable Workflow
   */
  addWorkflow(workflow: Workflow): this {
    this.workflows.push(workflow);
    return this;
  }
  /**
   * Add a Job to the current Config. Chainable
   * @param job - Injectable Job
   */
  addJob(job: Job): this {
    // Abstract rules later
    this.jobs.push(job);
    return this;
  }

  private prependVersionComment(source: string): string {
    const comment = `# This configuration has been automatically generated by the CircleCI Config SDK.
# For more information, see https://github.com/CircleCI-Public/circleci-config-sdk-ts
# SDK Version: ${SDKVersion}
`;
    return `${comment}\n${source}`;
  }

  /**
   * Export the CircleCI configuration as a YAML string.
   */
  stringify(): string {
    if (this.jobs.length <= 0) {
      throw new Error(
        `There are no jobs defined in this pipeline. A pipeline must have at least one job defined`,
      );
    }

    const generatedJobConfig: JobSchema = {};
    this.jobs.forEach((job) => {
      Object.assign(generatedJobConfig, job.generate());
    });

    const generatedWorkflowConfig: WorkflowSchema = {};
    this.workflows.forEach((workflow) => {
      Object.assign(generatedWorkflowConfig, workflow.generate());
    });

    const generatedConfig: CircleCIConfigSchema = {
      version: this.version,
      setup: this.setup,
      jobs: generatedJobConfig,
      workflows: generatedWorkflowConfig,
    };
    return this.prependVersionComment(Stringify(generatedConfig));
  }
}

export type ConfigVersion = 2 | 2.1;
export interface ConfigOrbImport {
  orbAlias: string;
  orbImport: string;
}

export interface CircleCIConfigObject {
  version: ConfigVersion;
  jobs?: Job[];
  commands?: Command[];
  workflows?: Workflow[];
}

export interface CircleCIConfigSchema {
  version: ConfigVersion;
  setup: boolean;
  orbs?: ConfigOrbImport[];
  jobs: JobSchema;
  commands?: CommandSchema;
  workflows: WorkflowSchema;
}
